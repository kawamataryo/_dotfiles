# ------------------------------------------------------------------------
# パッケージマネージャー
# ------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/dein.vim'

# ------------------------------------------------------------------------
# ファイル操作
# ------------------------------------------------------------------------
# grepを高速化かつ便利に
[[plugins]]
repo = 'vim-scripts/grep.vim'
hoo_add = '''
if executable('jvgrep')
  set grepprg=jvgrep
endif
'''

# grepにagを利用するために
# space aで検索開始
[[plugins]]
repo = 'mileszs/ack.vim'
hook_add = '''
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>
'''

# ctrlpでagを利用
[[plugins]]
repo = 'lokikl/vim-ctrlp-ag'
hook_add = '''
vnoremap ;l :CtrlPagVisual<cr>
nnoremap ;t :CtrlPagLocate<cr>
nnoremap ;e :CtrlPagPrevious<cr>
'''

# ファイルマネージャー
[[plugins]]
repo ='ctrlpvim/ctrlp.vim'
hook_add = '''
" window位置とかの変更
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'
" keymapの変更
nnoremap <silent> ;f :<C-u>CtrlP<CR>
nnoremap <silent> ;b :<C-u>CtrlPBuffer<CR>
nnoremap <silent> ;u :<C-u>CtrlPMRU<CR>
nnoremap <silent> ;d :<C-u>CtrlPDir<CR>
nnoremap <silent> ;l :<C-u>CtrlPLine<CR>
" キャッシュディレクトリ
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
" キャッシュを終了時に削除しない
let g:ctrlp_clear_cache_on_exit = 0
" 遅延再描画
let g:ctrlp_lazy_update = 1
" ルートパスと認識させるためのファイル
let g:ctrlp_root_markers = ['Gemfile', 'pom.xml', 'build.xml']
" CtrlPのウィンドウ最大高さ
let g:ctrlp_max_height = 20
" 無視するディレクトリ
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll|jpeg|jpg|gif|png|ai)$',
  \ }
" gitignoreのファイルを検索から削除
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
" ctrpの通常のkeymapを削除
let g:ctrlp_map = '<Nop>'
" ctrlpのマップ変更 <c-r>でキャッシュ更新。regexオプションの削除
let g:ctrlp_prompt_mappings = {
\ 'PrtClearCache()':      ['<c-r>'],
\ 'ToggleRegex()':        ['<Nop>'],
\ 'PrtSelectMove("j")':   ['<c-n>', '<down>'],
\ 'PrtSelectMove("k")':   ['<c-p>', '<up>'],
\ 'PrtHistory(-1)':       ['<c-j>'],
\ 'PrtHistory(1)':        ['<c-k>'],
\ }
" file 数に上限を設けつけない
let g:ctrlp_max_files = 0
" file検索にagを利用
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --ignore ''.git'' --ignore ''.DS_Store'' --ignore ''node_modules'' --hidden -g ""'
endif
'''

# ctrlpのrails拡張
[[plugins]]
repo ='iurifq/ctrlp-rails.vim'
hook_add = '''
 nnoremap <silent> ;m :<C-u>CtrlPModels<CR>
 nnoremap <silent> ;c :<C-u>CtrlPControllers<CR>
 nnoremap <silent> ;v :<C-u>CtrlPViews<CR>
 nnoremap <silent> ;g :<C-u>CtrlPMigrations<CR>
 nnoremap <silent> ;s :<C-u>CtrlPSpecs<CR>
'''

# ctrlpの検索拡張
[[plugins]]
repo = 'FelikZ/ctrlp-py-matcher'
hook_add = '''
" matcherをpythonベースのものに変更
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
'''

# nerdtreeにアイコン追加
[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
" 検索が遅くなるのでdenite,ctrlpでは無効にする
let g:webdevicons_enable_ctrlp = 0
'''

# サイドバーにファイル一覧を表示
# <ctrl> + n
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <C-e> :NERDTreeToggle<CR>
let NERDTreeDirArrows = 1
let NERDTreeShowHidden = 1
let NERDTreeChDirMode = 1
'''

# タブ表示でnerdtreeを使いやすく
[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'

# ------------------------------------------------------------------------
# 装飾
# ------------------------------------------------------------------------

# vimのモードをバッファ下部にわかりやすくする色付きで表示する
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='powerlineish'
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#show_close_button = 0
'''

# airlineのテーマ
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

# ------------------------------------------------------------------------
# ユーティリティ
# ------------------------------------------------------------------------

# 補完のneosnippetのsnipet集
[[plugins]]
repo = 'shougo/neosnippet-snippets'

# vimでgitを使いやすくする
[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
" statusとcommitウィンドウを<C-^>でトグル
call gina#custom#mapping#nmap(
      \ 'status', '<C-^>',
      \ ':<C-u>Gina commit<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
call gina#custom#mapping#nmap(
      \ 'commit', '<C-^>',
      \ ':<C-u>Gina status<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
" 起動のショートカット
nnoremap :gs<CR> :<C-u>Gina status<CR>
nnoremap :gc<CR> :<C-u>Gina commit<CR>
nnoremap :gl<CR> :<C-u>Gina log<CR>
nnoremap :gd<CR> :<C-u>Gina diff<CR>
'''

# テキストを整形する行を揃える
# :tab/(中心とする文字) :tab/= =で整形
[[plugins]]
repo = 'godlygeek/tabular'

# {の片割れをハイライトする際の軽量化プラグイン
[[plugins]]
repo = 'itchyny/vim-parenmatch'


# 簡単に行をコメントアウト
[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
" wordpress用のphpの設定
"let g:NERDCustomDelimiters = { 'php': { 'left': '<!--','right': '-->' } }
" commentaryと同じkeymapに変更
map gcc <plug>NERDCommenterToggle
'''

# ""や''の追加をコマンドで
[[plugins]]
repo = 'tpope/vim-surround'

# /検索の際にハイライトをリッチにする
[[plugins]]
repo = 'haya14busa/incsearch.vim'

# . commandを便利に
[[plugins]]
repo = 'tpope/vim-repeat'
on_idle = 1

# markdownのプレビューを有効に
[[plugins]]
repo = 'shime/vim-livedown'
hook_add = '''
nmap gm :LivedownToggle<CR>
let g:livedown_autorun = 1
let g:livedown_browser = "chrome"
'''

# vim上でソースコードを簡易実行
# <c-r>
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config={'_': {'split': '30vsplit'}}
set splitright
nnoremap <silent> <C-r> :QuickRun<CR>
'''


# シンタックスチェック
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
" aleの動作を通常は切る
let g:ale_enabled = 1
" errorのガターを常に表示
let g:ale_sign_column_always = 1
" errorの表示フォントを設定
let g:ale_sign_error = '✖'
let g:ale_sign_warning = '⚠'
" errorの色設定
highlight link aleerrorsign errormsg
highlight link alewarningsign moremsg
" 保存時のみerrorをチェック
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
" lintの適応切り替えショートカット
nnoremap <silent> :ale :<C-u>ALEToggle<CR>
'''

# ヤンク履歴を管理 <c-n> <c-p>
[[plugins]]
repo = 'leafcage/yankround.vim'
hook_add = '''
nmap p <plug>(yankround-p)
nmap gp <plug>(yankround-gp)
nmap <c-p> <plug>(yankround-prev)
nmap <c-n> <plug>(yankround-next)
'''

# 閉じタグ関連の機能拡張
[[plugins]]
repo = 'cohama/lexima.vim'

# rubyのendを補完
[[plugins]]
repo = 'tpope/vim-endwise'

# rubyのリファレンスを表示
[[plugins]]
repo = 'thinca/vim-ref'
hook_add = '''
let g:ref_refe_cmd = $HOME.'/.anyenv/envs/rbenv/shims/refe' "refeコマンドのパス
'''

# camelcaseの対応
[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = '''
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge
'''

# ------------------------------------------------------------------------
# カラースキーム
# ------------------------------------------------------------------------

# molokai
[[plugins]]
repo = 'tomasr/molokai'

# ------------------------------------------------------------------------
# window操作系
# ------------------------------------------------------------------------

#filetypeをコンテキストで切り替える
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
[[plugins]]
repo = 'shougo/context_filetype.vim'
hook_add = '''
" slimのruby補完の設定追加
" let g:context_filetype#filetypes = {
" \ 'slim' : [
" \   {
" \     'start' : '[-=]\s',
" \     'end' : '[\n\r]',
" \     'filetype' : 'ruby',
" \   }
" \ ]}
'''

# activewindowをわかりやすく
[[plugins]]
repo ='blueyed/vim-diminactive'

# bufferのサイズ調整のために
[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
call submode#enter_with('bufmove', 'n', '', 's>', '<c-w>>')
call submode#enter_with('bufmove', 'n', '', 's<', '<c-w><')
call submode#enter_with('bufmove', 'n', '', 's+', '<c-w>+')
call submode#enter_with('bufmove', 'n', '', 's-', '<c-w>-')
call submode#map('bufmove', 'n', '', '>', '<c-w>>')
call submode#map('bufmove', 'n', '', '<', '<c-w><')
call submode#map('bufmove', 'n', '', '+', '<c-w>+')
call submode#map('bufmove', 'n', '', '-', '<c-w>-')
'''

# indentを可視化
[[plugins]]
repo = 'Yggdroot/indentLine'

# ------------------------------------------------------------------------
# 移動系
# ------------------------------------------------------------------------

# 単語移動をもっと高速に
[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
map , <Plug>(easymotion-prefix)
" <Leader>f{char} to move to {char}
map  ,f <Plug>(easymotion-bd-f)
nmap ,f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap ,s <Plug>(easymotion-overwin-f2)
vmap ,s <Plug>(easymotion-bd-f2)

" Move to line
map ,l <Plug>(easymotion-bd-jk)
nmap ,l <Plug>(easymotion-overwin-line)

" Move to word
map  ,w <Plug>(easymotion-bd-w)
nmap ,w <Plug>(easymotion-overwin-w)
'''

# jkの移動をスピードアップ
[[plugins]]
repo = 'rhysd/accelerated-jk'
hook_add = '''
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''

# visualmodeでの行移動を直感的に
[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = '''
xmap <c-d> <Plug>(textmanip-duplicate-down)
xmap <c-D> <Plug>(textmanip-duplicate-up)

xmap <c-j> <plug>(textmanip-move-down)
xmap <c-h> <plug>(textmanip-move-left)
xmap <c-l> <plug>(textmanip-move-right)

" toggle insert/replace with <f10>
nmap <f10> <plug>(textmanip-toggle-mode)
xmap <f10> <plug>(textmanip-toggle-mode)

" use allow key to force replace movement
xmap  <Up>     <Plug>(textmanip-move-up)
xmap  <Down>   <Plug>(textmanip-move-down)
xmap  <Left>   <Plug>(textmanip-move-left)
xmap  <Right>  <Plug>(textmanip-move-right)
'''

# sublimeみたいなマルチプルカーソル
[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_start_word_key      = '<C-h>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-h>'
let g:multi_cursor_select_all_key      = 'g<A-h>'
let g:multi_cursor_next_key            = '<C-h>'
let g:multi_cursor_prev_key            = '<C-l>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'
" NeoCompleteとの競合回避
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
endfunction

function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
endfunction
'''

# markdownのtable拡張
[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

# ------------------------------------------------------------------------
# ファイルサポートの追加
# ------------------------------------------------------------------------

# toml
[[plugins]]
repo = 'cespare/vim-toml'

# json
[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''
# vue
[[plugins]]
repo = 'posva/vim-vue'

# html5
[[plugins]]
repo = 'othree/html5.vim'

# css3
[[plugins]]
repo = 'hail2u/vim-css3-syntax'

# javascript
[[plugins]]
repo = 'othree/yajs.vim'

# scss
[[plugins]]
repo = 'cakebaker/scss-syntax.vim'

# less
[[plugins]]
repo = 'groenewege/vim-less'

# stylus
[[plugins]]
repo = 'wavded/vim-stylus'

# markdown
[[plugins]]
repo = 'plasticboy/vim-markdown'

# slim
[[plugins]]
repo = 'slim-template/vim-slim'
hook_add = '''
autocmd BufRead,BufNewFile *.slim setfiletype slim
'''

# coffee
[[plugins]]
repo = 'kchmck/vim-coffee-script'

# blade
[[plugins]]
repo = 'jwalton512/vim-blade'

# smarty
[[plugins]]
repo = 'vim-scripts/smarty-syntax'

[[plugins]]
repo = 'ElmCast/elm-vim'

# ------------------------------------------------------------------------
# webアプリケーションサポート
# ------------------------------------------------------------------------
# ruby on rails
[[plugins]]
repo = 'tpope/vim-rails'
hook_add = '''
nnoremap :r<CR> :<C-u>R<CR>
nnoremap :rs<CR> :<C-u>RS<CR>
nnoremap :rv<CR> :<C-u>RV<CR>
'''

# ------------------------------------------------------------------------
# deopleteの補完プラグインの追加
# ------------------------------------------------------------------------
# python補完
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'
hook_add = '''
set completeopt-=preview "preview画面の非表示
'''

# ruby補完
[[plugins]]
repo = 'fishbullet/deoplete-ruby'

# javascript補完
[[plugins]]
repo = 'carlitux/deoplete-ternjs'
hook_add = '''
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent"]
'''
# javascriptの補完
[[plugins]]
repo = 'ternjs/tern_for_vim'
